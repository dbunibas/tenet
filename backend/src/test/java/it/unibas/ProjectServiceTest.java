package it.unibas;

import io.quarkus.test.junit.QuarkusTest;
import it.unibas.tenet.dao.ProjectRepository;
import it.unibas.tenet.model.Cell;
import it.unibas.tenet.model.Database;
import it.unibas.tenet.model.Evidence;
import it.unibas.tenet.model.Header;
import it.unibas.tenet.model.Project;
import it.unibas.tenet.model.SemanticQuery;
import it.unibas.tenet.model.Table;
import it.unibas.tenet.model.dto.frontend.EvidenceFrontendDTO;
import it.unibas.tenet.model.dto.frontend.EvidenceToGenerateDTO;
import it.unibas.tenet.model.dto.frontend.ProjectFrontendDTO;
import it.unibas.tenet.service.ProjectService;
import it.unibas.tenet.util.Mapper;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;

@QuarkusTest
@TestInstance(Lifecycle.PER_CLASS)
public class ProjectServiceTest {

    public ProjectServiceTest() {
        project = new Project();
        project.setName("People2");
        Header headerName = new Header("Name");
        Header headerAge = new Header("Age");
        Header headerLoc = new Header("Loc");
        Database db = new Database();
        Table table = new Table();
        table.setSchema(List.of(headerName, headerAge, headerLoc));
        List<Cell> cells = new ArrayList<>();
        cells.add(new Cell(headerName, "Mike", 0, 0));
        cells.add(new Cell(headerAge, "47", 0, 1));
        cells.add(new Cell(headerLoc, "SF", 0, 2));
        cells.add(new Cell(headerName, "Anne", 1, 0));
        cells.add(new Cell(headerAge, "22", 1, 1));
        cells.add(new Cell(headerLoc, "NY", 1, 2));
        cells.add(new Cell(headerName, "John", 2, 0));
        cells.add(new Cell(headerAge, "12", 2, 1));
        cells.add(new Cell(headerLoc, "NY", 2, 2));
        cells.add(new Cell(headerName, "Paul", 3, 0));
        cells.add(new Cell(headerAge, "8", 3, 1));
        cells.add(new Cell(headerLoc, "NY", 3, 2));
        table.setCells(cells);
        db.setTable(table);
        project.setDatabase(db);
    }

    @Inject
    private ProjectService projectService;

    private Project project;

    private String projectId;

    @BeforeAll
    public void setup() {
        ProjectFrontendDTO projectDTO = Mapper.map(project, ProjectFrontendDTO.class);
        ProjectFrontendDTO saved = projectService.createProject(projectDTO);
        this.project.setId(saved.getId());
        this.projectId = saved.getId().toString();
    }

    @Test
    public void testProjectActions() {
        ProjectFrontendDTO retrieved = projectService.getProjectById(this.projectId);
        Assertions.assertNotNull(retrieved);

        Evidence userEvidence = new Evidence();
        userEvidence.setAutoGenerated(false);
        List<Cell> evidenceCells = new ArrayList<>();
        Header headerName = new Header("Name");
        Header headerAge = new Header("Age");
        Header headerLoc = new Header("Loc");
        evidenceCells.add(new Cell(headerName, "Mike", 0, 0));
        evidenceCells.add(new Cell(headerAge, "47", 0, 1));
        evidenceCells.add(new Cell(headerAge, "22", 1, 1));
        userEvidence.setCells(evidenceCells);
        EvidenceFrontendDTO evidenceDTO = Mapper.map(userEvidence, EvidenceFrontendDTO.class);
        projectService.createEvidence(evidenceDTO, projectId);

        EvidenceFrontendDTO evidence = projectService.getEvidence(projectId).stream().filter(e -> !e.isAutoGenerated()).findAny().orElse(null);
        Assertions.assertNotNull(evidence.getId());

        String sql = projectService.getSQLQuery(this.projectId).getSql();
        Assertions.assertFalse(sql.trim().isEmpty());
        Assertions.assertEquals("SELECT t0.a0, t0.key, t0.a1, t0.key, t1.a1, t1.key FROM People2 as t0, People2 as t1 WHERE t0.a1>t1.a1 LIMIT 800", sql);

        EvidenceToGenerateDTO evidenceToGenerate = new EvidenceToGenerateDTO();
        evidenceToGenerate.setPositiveNumber(2);
        evidenceToGenerate.setNegativeNumber(1);
        List<EvidenceFrontendDTO> generated = projectService.generateEvidence(projectId, evidenceToGenerate);
        Assertions.assertEquals(3, generated.size());
        for (EvidenceFrontendDTO evidenceFrontendDTO : generated) {
            Assertions.assertNotNull(evidence.getId());
        }

        List<SemanticQuery> semanticQueries = projectService.getSemanticQueries(projectId, generated.get(0).getId().toString());
        Assertions.assertFalse(semanticQueries.isEmpty());
    }

    @AfterAll
    public void cleanup() {
        ProjectRepository projectRepository = new ProjectRepository();
        projectRepository.deleteById(project.getId());

    }
}
