import {Database} from "./database";
import {Evidence} from "./evidence";
import {Table} from "./table";

export class Project {
  constructor(
    public name: string,
    public database: Database,
    public evidence: Evidence[] = []
  ) {
  }

  public id?: string;

  public findUserEvidence(): Evidence | undefined {
    return this.evidence?.find(e => !e.autoGenerated);
  }

  buildRows(): void {
    let userEvidence = this.findUserEvidence();
    let table: Table = this.database.table;
    table.rows = [];
    let rowCol: any = {};
    for (let cell of table.cells) {
      if (userEvidence) { // Set existing user selection to cells
        if (userEvidence.cells.find(c => c.row === cell.row && c.column === cell.column)) {
          cell.selected = true;
        }
      }
      rowCol[cell.header.name] = cell;
      if (cell.column + 1 === table.schema.length) {
        table.rows.push(rowCol);
        rowCol = {};
      }
    }
  }

  getFilteredRows(filterProperty: string, filterString: string): any[] {
    return this.database.table.rows.filter(row => {
      if (filterProperty === "ALL-PROPERTY") {
        return Object.keys(row).find(key => row[key].value.toString().toUpperCase().includes(filterString.toUpperCase())) !== undefined;
      }
      return row[filterProperty].value.toString().toUpperCase().includes(filterString.toUpperCase());
    });
  }
}
